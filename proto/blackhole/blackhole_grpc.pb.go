// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.0
// source: proto/blackhole.proto

package blackhole

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlackholeClient is the client API for Blackhole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlackholeClient interface {
	//
	// Endpoint for sending a task to a given queue
	// Operation (inserting the task in queue) is synchronous, while
	// execution of the task itself is async
	//
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	//
	// Endpoint for getting information about Task based on it's id
	// Operation is synchronous
	//
	GetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	//
	// Endpoint for deleting a task. This can be done only if
	// execution of the task hasn't begun yet.
	// Meant to be used to clean tasks if queue gets overfilled
	// Operation is synchronous
	//
	DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	//
	// Endpoint for creating new task queue
	// Operation is synchronous
	//
	CreateTaskQueue(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*TaskQueue, error)
}

type blackholeClient struct {
	cc grpc.ClientConnInterface
}

func NewBlackholeClient(cc grpc.ClientConnInterface) BlackholeClient {
	return &blackholeClient{cc}
}

func (c *blackholeClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/C12S.Blackhole.Blackhole/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackholeClient) GetTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/C12S.Blackhole.Blackhole/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackholeClient) DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/C12S.Blackhole.Blackhole/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blackholeClient) CreateTaskQueue(ctx context.Context, in *TaskQueue, opts ...grpc.CallOption) (*TaskQueue, error) {
	out := new(TaskQueue)
	err := c.cc.Invoke(ctx, "/C12S.Blackhole.Blackhole/CreateTaskQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlackholeServer is the server API for Blackhole service.
// All implementations must embed UnimplementedBlackholeServer
// for forward compatibility
type BlackholeServer interface {
	//
	// Endpoint for sending a task to a given queue
	// Operation (inserting the task in queue) is synchronous, while
	// execution of the task itself is async
	//
	AddTask(context.Context, *Task) (*Task, error)
	//
	// Endpoint for getting information about Task based on it's id
	// Operation is synchronous
	//
	GetTask(context.Context, *TaskId) (*Task, error)
	//
	// Endpoint for deleting a task. This can be done only if
	// execution of the task hasn't begun yet.
	// Meant to be used to clean tasks if queue gets overfilled
	// Operation is synchronous
	//
	DeleteTask(context.Context, *TaskId) (*Task, error)
	//
	// Endpoint for creating new task queue
	// Operation is synchronous
	//
	CreateTaskQueue(context.Context, *TaskQueue) (*TaskQueue, error)
	mustEmbedUnimplementedBlackholeServer()
}

// UnimplementedBlackholeServer must be embedded to have forward compatible implementations.
type UnimplementedBlackholeServer struct {
}

func (UnimplementedBlackholeServer) AddTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedBlackholeServer) GetTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedBlackholeServer) DeleteTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedBlackholeServer) CreateTaskQueue(context.Context, *TaskQueue) (*TaskQueue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskQueue not implemented")
}
func (UnimplementedBlackholeServer) mustEmbedUnimplementedBlackholeServer() {}

// UnsafeBlackholeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlackholeServer will
// result in compilation errors.
type UnsafeBlackholeServer interface {
	mustEmbedUnimplementedBlackholeServer()
}

func RegisterBlackholeServer(s grpc.ServiceRegistrar, srv BlackholeServer) {
	s.RegisterService(&Blackhole_ServiceDesc, srv)
}

func _Blackhole_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackholeServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/C12S.Blackhole.Blackhole/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackholeServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blackhole_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackholeServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/C12S.Blackhole.Blackhole/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackholeServer).GetTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blackhole_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackholeServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/C12S.Blackhole.Blackhole/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackholeServer).DeleteTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blackhole_CreateTaskQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlackholeServer).CreateTaskQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/C12S.Blackhole.Blackhole/CreateTaskQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlackholeServer).CreateTaskQueue(ctx, req.(*TaskQueue))
	}
	return interceptor(ctx, in, info, handler)
}

// Blackhole_ServiceDesc is the grpc.ServiceDesc for Blackhole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blackhole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "C12S.Blackhole.Blackhole",
	HandlerType: (*BlackholeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _Blackhole_AddTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Blackhole_GetTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Blackhole_DeleteTask_Handler,
		},
		{
			MethodName: "CreateTaskQueue",
			Handler:    _Blackhole_CreateTaskQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/blackhole.proto",
}
